#!/bin/bash

# BOOTSTRAP SCRIPT IN MY DOTFILES
# This script is used to install all the necessary tools and dependencies

UPGRADE_PACKAGES=false

# usage: echo_highlight "message"
# display a message in yellow
echo_highlight() {
    echo -e "\e[1;33m$1\e[0m"
}

detect_os() {
    OS_DISTRO=unknown

    # Read distribution information
    if [ -f /etc/os-release ]; then
        . /etc/os-release
    else
        echo_highlight "Cannot determine the Linux distribution."
        return 1
    fi

    # Convert ID_LIKE to a space-separated list or fall back to ID if not set
    local DISTROS="${ID_LIKE} $ID"
    local distro

    for distro in $DISTROS; do
        case "$distro" in
            debian)
                echo_highlight "Detected Debian-based system ($ID)"
                OS_DISTRO=debian
                return 0
                ;;
            fedora|rhel|centos)
                echo_highlight "Detected Fedora-based system ($ID)"
                OS_DISTRO=fedora
                return 0
                ;;
            arch)
                echo_highlight "Detected Arch-based system ($ID)"
                OS_DISTRO=arch
                return 0
                ;;
        esac
    done

    echo_highlight "Unsupported Linux distribution: $ID"
    return 1
}

prepare_package_manager() {
    case "$OS_DISTRO" in
        debian)
            sudo apt update
            sudo apt install software-properties-common -y
            ;;
        fedora)
            sudo dnf check-update
            ;;
        arch)
            sudo pacman -Sy
            ;;
    esac
    return 0
}

install_git() {
    # Check if Git is already installed
    if command -v git &> /dev/null; then
        echo_highlight "Git is already installed."
        return 0
    fi

    echo_highlight "Installing Git..."

    case "$OS_DISTRO" in
        debian)
            sudo apt install git -y
            ;;
        fedora)
            sudo dnf install git -y
            ;;
        arch)
            sudo pacman -S --noconfirm git
            ;;
    esac
}

install_wget() {
    # Check if Wget is already installed
    if command -v wget &> /dev/null; then
        echo_highlight "Wget is already installed."
        return 0
    fi

    echo_highlight "Installing Wget..."

    case "$OS_DISTRO" in
        debian)
            sudo apt install wget -y
            ;;
        fedora)
            sudo dnf install wget -y
            ;;
        arch)
            sudo pacman -S --noconfirm wget
            ;;
    esac
}

install_curl() {
    # Check if Curl is already installed
    if command -v curl &> /dev/null; then
        echo_highlight "Curl is already installed."
        return 0
    fi

    echo_highlight "Installing Curl..."

    case "$OS_DISTRO" in
        debian)
            sudo apt install curl -y
            ;;
        fedora)
            sudo dnf install curl -y
            ;;
        arch)
            sudo pacman -S --noconfirm curl
            ;;
    esac
}

install_zsh() {
    # Check if Zsh is already installed
    if command -v zsh &> /dev/null; then
        echo_highlight "Zsh is already installed."
        return 0
    fi

    echo_highlight "Installing Zsh..."

    case "$OS_DISTRO" in
        debian)
            sudo apt install zsh -y
            ;;
        fedora)
            sudo dnf install zsh -y
            ;;
        arch)
            sudo pacman -S --noconfirm zsh
            ;;
    esac
}

set_default_shell() {
    # Check if Zsh is the default shell
    if [ "$SHELL" = "$(command -v zsh)" ]; then
        echo_highlight "Zsh is already the default shell."
        return 0
    fi

    echo_highlight "Setting Zsh as the default shell..."

    # detect if chsh is available
    if ! command -v chsh &> /dev/null; then
        if [ "$OS_DISTRO" = "fedora" ]; then
            sudo dnf install util-linux-user -y
        else
            echo_highlight "chsh is not available. Please change the default shell manually."
            return 1
        fi
    fi

    sudo chsh -s "$(command -v zsh)" $USER
}

install_antidote() {
    # Check if Antidote is already installed
    if [ -d "$HOME/.antidote" ]; then
        if $UPGRADE_PACKAGES; then
            echo_highlight "Upgrading Antidote..."
            git -C ${ZDOTDIR:-$HOME}/.antidote pull
        else
            echo_highlight "Antidote is already installed."
        fi
        return 0
    fi

    echo_highlight "Installing Antidote..."

    git clone --depth=1 https://github.com/mattmc3/antidote.git ${ZDOTDIR:-$HOME}/.antidote
}

install_helix() {
    # Check if Helix is already installed
    if command -v hx &> /dev/null; then
        echo_highlight "Helix is already installed."
        return 0
    fi

    echo_highlight "Installing Helix..."

    case "$OS_DISTRO" in
        debian)
            sudo add-apt-repository ppa:maveonair/helix-editor -y
            sudo apt update
            sudo apt install helix -y
            ;;
        fedora)
            sudo dnf install helix -y
            ;;
        arch)
            sudo pacman -S --noconfirm helix
            ;;
    esac
}

install_micro() {
    # Check if Micro is already installed
    if command -v micro &> /dev/null; then
        echo_highlight "Micro is already installed."

        if $UPGRADE_PACKAGES; then
            echo_highlight "Upgrading Micro..."
        else 
            return 0
        fi
    else 
      echo_highlight "Installing Micro..."
    fi

    sudo bash -c "cd /usr/bin; wget -O- https://getmic.ro | GETMICRO_REGISTER=y sh"

    if [ $? -ne 0 ]; then
        echo_highlight "Failed to install Micro."
        return 1
    fi
}

install_starship() {
    # Check if Starship is already installed
    if command -v starship &> /dev/null; then
        echo_highlight "Starship is already installed."

        if $UPGRADE_PACKAGES; then
            echo_highlight "Upgrading Starship..."
        else 
            return 0
        fi
    else
        echo_highlight "Installing Starship..."
    fi

    curl -fsSL https://starship.rs/install.sh | sh
}

install_micromamba() {
    # Check if Micromamba is already installed
    if command -v micromamba &> /dev/null; then
        echo_highlight "Micromamba is already installed."
        if $UPGRADE_PACKAGES; then
            echo_highlight "Upgrading Micromamba..."
            micromamba self-update
        fi
        return 0
    fi

    echo_highlight "Installing Micromamba..."
    bash <(curl -L micro.mamba.pm/install.sh)
}

install_pipx() {
    # Check if pipx is already installed
    if command -v pipx &> /dev/null; then
        echo_highlight "pipx is already installed."
        return 0
    fi

    echo_highlight "Installing pipx..."
    case "$OS_DISTRO" in
        debian)
            sudo apt install pipx -y
            ;;
        fedora)
            sudo dnf install pipx -y
            ;;
        arch)
            sudo pacman -S --noconfirm python-pipx
            ;;
    esac
    sudo pipx ensurepath
}

install_pipx_packages() {
    PIPX_PACKAGES=(
        "mypy"
        "hyfetch"
    )

    echo_highlight "Installing pipx packages..."
    for package in "${PIPX_PACKAGES[@]}"; do
        echo_highlight "Installing pipx: $package..."
        pipx install $package || return 1
    done
}

upgrade_system() {
    case "$OS_DISTRO" in
        debian)
            sudo apt update
            sudo apt upgrade -y
            ;;
        fedora)
            sudo dnf check-update
            sudo dnf upgrade -y
            ;;
        arch)
            sudo pacman -Syu
            ;;
    esac
}

main() {
    detect_os || return 1
    prepare_package_manager || return 1
    install_git || return 1
    install_wget || return 1
    install_curl || return 1
    install_zsh || return 1
    install_antidote || return 1
    install_helix || return 1
    install_micro || return 1
    install_starship || return 1
    install_micromamba || return 1
    install_pipx || return 1
    install_pipx_packages || return 1
    set_default_shell || return 1

    if $UPGRADE_PACKAGES; then
        upgrade_system || return 1
    fi

    echo_highlight "All tools and dependencies have been installed successfully."
    return 0
}

echo_highlight "Preparing to install tools and dependencies..."

if [ "$1" = "--upgrade" ]; then
    UPGRADE_PACKAGES=true
    echo_highlight "Upgrade option enabled."
fi

for bootstrap_option in "$BOOTSTRAP_OPTIONS"; do
    case $bootstrap_option in
        upgrade)
            UPGRADE_PACKAGES=true
            echo_highlight "Upgrade option enabled."
            ;;
    esac
done

main
