#!/bin/bash

# BOOTSTRAP SCRIPT IN MY DOTFILES
# This script is used to install all the necessary tools and dependencies

UPGRADE_PACKAGES="${UPGRADE_PACKAGES:-false}"
INSTALL_EPEL="${INSTALL_EPEL:-true}"
INSTALL_RPMFUSION="${INSTALL_RPMFUSION:-true}"
INSTALL_DOCKER="${INSTALL_DOCKER:-false}"
INSTALL_KOPIA="${INSTALL_KOPIA:-false}"
TAILSCALE_AUTHKEY="${TAILSCALE_AUTHKEY:-}"
TAILSCALE_SERVER="${TAILSCALE_SERVER:-}"
TAILSCALE_EXTRA_COMMANDS_DEFAULT="--accept-dns=false --advertise-exit-node"
TAILSCALE_EXTRA_COMMANDS="${TAILSCALE_EXTRA_COMMANDS:-$TAILSCALE_EXTRA_COMMANDS_DEFAULT}"

# usage: echo_highlight "message"
# display a message in yellow
echo_highlight() {
    echo -e "\e[1;33m$1\e[0m"
}

detect_os() {
    OS_DISTRO=unknown

    # Read distribution information
    if [ -f /etc/os-release ]; then
        . /etc/os-release
    else
        echo_highlight "Cannot determine the Linux distribution."
        return 1
    fi

    # Convert ID_LIKE to a space-separated list or fall back to ID if not set
    local DISTROS="$ID ${ID_LIKE}"
    local distro

    for distro in $DISTROS; do
        case "$distro" in
            ubuntu)
                echo_highlight "Detected Ubuntu-based system ($ID)"
                OS_DISTRO=ubuntu
                return 0
                ;;
            debian)
                echo_highlight "Detected Debian-based system ($ID)"
                OS_DISTRO=debian
                return 0
                ;;
            fedora|rhel|centos)
                echo_highlight "Detected Fedora-based system ($ID)"
                OS_DISTRO=fedora
                return 0
                ;;
            arch)
                echo_highlight "Detected Arch-based system ($ID)"
                OS_DISTRO=arch
                return 0
                ;;
        esac
    done

    echo_highlight "Unsupported Linux distribution: $ID"
    return 1
}

prepare_package_manager() {
    case "$OS_DISTRO" in
        ubuntu|debian)
            sudo apt update
            sudo apt install software-properties-common -y
            ;;
        fedora)
            sudo dnf check-update
            if $INSTALL_EPEL; then
                sudo dnf install --nogpgcheck https://dl.fedoraproject.org/pub/epel/epel-release-latest-$(rpm -E %rhel).noarch.rpm
                if [ $? -ne 0 ]; then
                    echo_highlight "Failed to install EPEL repository. Please install it manually."
                    return 1
                fi
                if $INSTALL_RPMFUSION; then
                    sudo dnf install --nogpgcheck https://mirrors.rpmfusion.org/free/el/rpmfusion-free-release-$(rpm -E %rhel).noarch.rpm https://mirrors.rpmfusion.org/nonfree/el/rpmfusion-nonfree-release-$(rpm -E %rhel).noarch.rpm
                    if [ $? -ne 0 ]; then
                        echo_highlight "Failed to install RPM Fusion repository. Please install it manually."
                        return 1
                    fi
                fi
            fi
            ;;
        arch)
            sudo pacman -Sy
            ;;
    esac
    return 0
}

meta_install_dispatch() {
    # usage: meta_install_dispatch <name> <command> <debian-packages> <fedora-packages> <arch-packages>
    local name=$1
    local command=$2
    local debian_packages=$3
    local fedora_packages=$4
    local arch_packages=$5

    # Check if the package is already installed
    if command -v $command &> /dev/null; then
        echo_highlight "$name is already installed."
        return 0
    fi

    echo_highlight "Installing $name..."

    case "$OS_DISTRO" in
        ubuntu|debian)
            echo $debian_packages | xargs sudo apt install -y
            ;;
        fedora)
            echo $fedora_packages | xargs sudo dnf install -y
            ;;
        arch)
            echo $arch_packages | xargs sudo pacman -S --noconfirm
            ;;
    esac

    if [ $? -ne 0 ]; then
        echo_highlight "Failed to install $name."
        return 1
    fi
}

meta_simple_install() {
    # usage: meta_install_dispatch <name> <command>
    local name=$1
    local command=$2

    meta_install_dispatch "$name" "$command" "$command" "$command" "$command"
}

set_default_shell() {
    # Check if Zsh is the default shell
    if [ "$SHELL" = "$(command -v zsh)" ]; then
        echo_highlight "Zsh is already the default shell."
        return 0
    fi

    echo_highlight "Setting Zsh as the default shell..."

    # detect if chsh is available
    if ! command -v chsh &> /dev/null; then
        if [ "$OS_DISTRO" = "fedora" ]; then
            sudo dnf install util-linux-user -y
        else
            echo_highlight "chsh is not available. Please change the default shell manually."
            return 1
        fi
    fi

    sudo chsh -s "$(command -v zsh)" $USER
}

install_antidote() {
    # Check if Antidote is already installed
    if [ -d "$HOME/.antidote" ]; then
        if $UPGRADE_PACKAGES; then
            echo_highlight "Upgrading Antidote..."
            git -C ${ZDOTDIR:-$HOME}/.antidote pull
        else
            echo_highlight "Antidote is already installed."
        fi
        return 0
    fi

    echo_highlight "Installing Antidote..."

    git clone --depth=1 https://github.com/mattmc3/antidote.git ${ZDOTDIR:-$HOME}/.antidote
}

install_helix() {
    # Check if Helix is already installed
    if command -v hx &> /dev/null; then
        echo_highlight "Helix is already installed."
        return 0
    fi

    echo_highlight "Installing Helix..."

    case "$OS_DISTRO" in
        ubuntu|debian)
            sudo add-apt-repository ppa:maveonair/helix-editor -y
            sudo apt update
            sudo apt install helix -y
            ;;
        fedora)
            sudo dnf install helix -y
            ;;
        arch)
            sudo pacman -S --noconfirm helix
            ;;
    esac
}

install_micro() {
    # Check if Micro is already installed
    if command -v micro &> /dev/null; then
        echo_highlight "Micro is already installed."

        if $UPGRADE_PACKAGES; then
            echo_highlight "Upgrading Micro..."
        else 
            return 0
        fi
    else 
      echo_highlight "Installing Micro..."
    fi

    sudo bash -c "cd /usr/bin; wget -O- https://getmic.ro | GETMICRO_REGISTER=y sh"

    if [ $? -ne 0 ]; then
        echo_highlight "Failed to install Micro."
        return 1
    fi
}

install_starship() {
    # Check if Starship is already installed
    if command -v starship &> /dev/null; then
        echo_highlight "Starship is already installed."

        if $UPGRADE_PACKAGES; then
            echo_highlight "Upgrading Starship..."
        else 
            return 0
        fi
    else
        echo_highlight "Installing Starship..."
    fi

    curl -fsSL https://starship.rs/install.sh | sh
}

install_micromamba() {
    # Check if Micromamba is already installed
    if command -v micromamba &> /dev/null; then
        echo_highlight "Micromamba is already installed."
        if $UPGRADE_PACKAGES; then
            echo_highlight "Upgrading Micromamba..."
            micromamba self-update
        fi
        return 0
    fi

    echo_highlight "Installing Micromamba..."
    bash <(curl -L micro.mamba.pm/install.sh)
}

install_pipx() {
    meta_install_dispatch "pipx" "pipx" "pipx" "pipx" "python-pipx"
    sudo pipx ensurepath
}

install_pipx_packages() {
    PIPX_PACKAGES=(
        "mypy"
        "hyfetch"
    )

    echo_highlight "Installing pipx packages..."
    for package in "${PIPX_PACKAGES[@]}"; do
        echo_highlight "Installing pipx: $package..."
        pipx install $package || return 1
    done
}

install_docker() {
    # Check if Docker is already installed
    if command -v docker &> /dev/null; then
        echo_highlight "Docker is already installed."
        return 0
    fi

    echo_highlight "Installing Docker..."

    case "$OS_DISTRO" in
        debian)
            sudo apt update
            sudo apt install apt-transport-https ca-certificates curl gnupg lsb-release -y
            sudo install -m 0755 -d /etc/apt/keyrings
            curl -fsSL https://download.docker.com/linux/debian/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker-archive-keyring.gpg
            sudo chmod a+r /etc/apt/keyrings/docker-archive-keyring.gpg
            echo \
                "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker-archive-keyring.gpg] \
                https://download.docker.com/linux/debian \
                $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
            sudo apt update
            sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin -y
            ;;
        ubuntu)
            sudo apt update
            sudo apt install apt-transport-https ca-certificates curl gnupg lsb-release -y
            sudo install -m 0755 -d /etc/apt/keyrings
            sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker-archive-keyring.gpg
            sudo chmod a+r /etc/apt/keyrings/docker-archive-keyring.gpg
            echo \
                "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker-archive-keyring.gpg] \
                https://download.docker.com/linux/ubuntu \
                $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
            sudo apt update
            sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin -y
            ;;
        fedora)
            sudo dnf install dnf-plugins-core -y
            sudo dnf config-manager --add-repo https://download.docker.com/linux/rhel/docker-ce.repo
            sudo dnf install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin -y
            sudo systemctl enable docker
            sudo systemctl start docker
            ;;
        arch)
            sudo pacman -S --noconfirm docker
            sudo systemctl enable docker
            sudo systemctl start docker
            ;;
    esac
    sudo docker run hello-world
}

install_tailscale() {
    if [ -z "$TAILSCALE_AUTHKEY" ]; then
        echo_highlight "TAILSCALE_AUTHKEY is not set. Skipping Tailscale installation."
        return 0
    fi
    if command -v tailscale &> /dev/null; then
        echo_highlight "Tailscale is already installed."
        return 0
    fi

    echo_highlight "Installing Tailscale..."
    
    curl -fsSL https://tailscale.com/install.sh | sh

    if [ $? -ne 0 ]; then
        echo_highlight "Failed to install Tailscale."
        return 1
    fi

    TAILSCALE_COMMANDS="sudo tailscale up --authkey $TAILSCALE_AUTHKEY"
    if [ -n "$TAILSCALE_SERVER" ]; then
        TAILSCALE_COMMANDS="$TAILSCALE_COMMANDS --login-server $TAILSCALE_SERVER"
    fi
    TAILSCALE_COMMANDS="$TAILSCALE_COMMANDS $TAILSCALE_EXTRA_COMMANDS"
    echo "Running the following command to connect to Tailscale:"
    echo "$TAILSCALE_COMMANDS"

    $TAILSCALE_COMMANDS

    if [ $? -ne 0 ]; then
        echo_highlight "Failed to connect to Tailscale."
        return 1
    fi
}

install_kopia() {
    if command -v kopia &> /dev/null; then
        echo_highlight "Kopia is already installed."
        return 0
    fi

    echo_highlight "Installing Kopia..."

    case "$OS_DISTRO" in
        ubuntu|debian)
            curl -s https://kopia.io/signing-key | sudo gpg --dearmor -o /etc/apt/keyrings/kopia-keyring.gpg
            echo "deb [signed-by=/etc/apt/keyrings/kopia-keyring.gpg] http://packages.kopia.io/apt/ stable main" | sudo tee /etc/apt/sources.list.d/kopia.list
            sudo apt update
            sudo apt install kopia -y
            ;;
        fedora)
            rpm --import https://kopia.io/signing-key
            cat <<EOF | sudo tee /etc/yum.repos.d/kopia.repo
[Kopia]
name=Kopia
baseurl=http://packages.kopia.io/rpm/stable/\$basearch/
gpgcheck=1
enabled=1
gpgkey=https://kopia.io/signing-key
EOF
            sudo dnf install kopia -y
            ;;
        arch)
            sudo yay -S --noconfirm kopia-bin
            ;;
    esac
}

upgrade_system() {
    case "$OS_DISTRO" in
        ubuntu|debian)
            sudo apt update
            sudo apt upgrade -y
            ;;
        fedora)
            sudo dnf check-update
            sudo dnf upgrade -y
            ;;
        arch)
            sudo pacman -Syu
            ;;
    esac
}

main() {
    detect_os || return 1
    prepare_package_manager || return 1
    meta_simple_install "Git" "git" || return 1
    meta_simple_install "WGet" "wget" || return 1
    meta_simple_install "Curl" "curl" || return 1
    meta_simple_install "Z Shell" "zsh" || return 1
    install_antidote || return 1
    install_helix || return 1
    install_micro || return 1
    install_starship || return 1
    install_micromamba || return 1
    install_pipx || return 1
    install_pipx_packages || return 1
    set_default_shell || return 1
    install_tailscale || return 1

    if $INSTALL_DOCKER; then
        install_docker || return 1
    fi

    if $INSTALL_KOPIA; then
        install_kopia || return 1
    fi

    if $UPGRADE_PACKAGES; then
        upgrade_system || return 1
    fi

    echo_highlight "All tools and dependencies have been installed successfully."
    return 0
}

echo_highlight "Preparing to install tools and dependencies..."

if [ "$1" = "--upgrade" ]; then
    UPGRADE_PACKAGES=true
    echo_highlight "Upgrade option enabled."
fi

for bootstrap_option in "$BOOTSTRAP_OPTIONS"; do
    case $bootstrap_option in
        upgrade)
            UPGRADE_PACKAGES=true
            echo_highlight "Upgrade option enabled."
            ;;
    esac
done

main
